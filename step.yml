#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  SPM-dependency-checker
summary: |
   Uses Dependency check by jeremylong to search Swift package manager files to find CVE vulnerabilities
description: |
  This custom Bitrise step leverages jeremylong's GitHub repository to scan and identify Common Vulnerabilities and Exposures (CVEs) in Swift Package Manager (SPM) dependencies for iOS projects. By integrating this step into your CI/CD pipeline, you can ensure that your iOS application's dependencies are regularly checked for known security vulnerabilities, helping to maintain a secure codebase.
website: https://github.com/simonwhitehouse/bitrise-step-spm-dependency-checker
source_code_url: https://github.com/simonwhitehouse/bitrise-step-spm-dependency-checker
support_url: https://github.com/simonwhitehouse/bitrise-step-spm-dependency-checker/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
# project_type_tags:
#   - ios
#   - macos
#   - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - dependency

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake


toolkit:
  bash:
    entry_file: step.sh
deps:
  brew:
  - name: git
  - name: dependency-check
inputs:
  - fail_on_cvss_level: 11
    opts:
      title: "Fail on CVSS Level"
      summary: "The CVSS score threshold to fail the build."
      description: |
        The Common Vulnerability Scoring System (CVSS) score threshold. If any vulnerability is found with a score equal to or higher than this value, the build will fail.

        Can be a decimal value between 0.0 and 10.0.
      is_expand: true
      is_required: true
      value_options: []

  - app_title: "iOS Application"
    opts:
      title: "App Title"
      summary: "The title of the project being scanned."
      description: |
        The name or title of the iOS project for which the dependencies are being scanned.

        This will be used in the generated report.
      is_expand: true
      is_required: true
      value_options: []

  - spm_file_path: "$BITRISE_SOURCE_DIR"
    opts:
      title: "SPM File Path"
      summary: "The path to the Swift Package Manager file."
      description: |
        The path to the `Package.swift` file that defines the dependencies for the iOS project. If nothing is passed here, the scan will be done at root
      is_expand: true
      is_required: false
      value_options: []

  - output_file_format: "HTML"
    opts:
      title: "Output File Format"
      summary: "The format of the generated scan report."
      description: |
        The format of the report generated by the vulnerability scan.

        Supported formats include HTML, XML, CSV, JSON, JUNIT, SARIF, JENKINS, GITLAB or ALL.
      is_expand: true
      is_required: true
      value_options: ["HTML", "JSON", "XML", "CSV", "JUNIT", "SARIF", "JENKINS", "GITLAB", "ALL"]

  - api_key: ""
    opts:
      title: "API Key"
      summary: "The API key for accessing the vulnerability database."
      description: |
        Please sign up here `https://nvd.nist.gov/developers/request-an-api-key`. Although the API is not required, not providing one makes this step very slow.
      is_expand: true
      is_required: false
      value_options: []

  - should_update: "no"
    opts:
      title: "Whether the databased should be updated before scanning"
      summary: "Whether it should update or not"
      description: |
        Set this to 'yes' to fetch updates. If set to 'no', it will not update.
      is_expand: true
      is_required: false
      value_options: ["yes", "no"]
